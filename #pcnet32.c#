#include <net/pcnet32.h>
#include <pci.h>
#include <pci_names.h>
#include <pci_ids.h>
#include <net/pcnet32_driver.h>
#include <malloc.h>
#include <net/pcnet32_private.h>
#include <net/ip.h>

driver_t pcnet32_driver;
device_t pcnet32_device;
device_ops_t pcnet32_ops = {
  .init = pcnet32_device_init,
  //.read = pcnet32_read,
  //.write = pcnet32_write,
  .set_device_option = pcnet32_set_device_option
  //  .get_device_option = pcnet32_get_device_option
  
};





void pcnet32_init() {
  

  driver_init_driver(&pcnet32_driver);
  pcnet32_driver.name = "Pcnet32";
  
  driver_register(&pcnet32_driver, 0);

  pci_dev_t *dev = pci_find_device(PCI_ID(PCI_VENDOR_ID_AMD, PCI_DEVICE_ID_AMD_LANCE), 0);
  printf("--------\nFOUND DEVICE %p\n--------\n", dev);
  
  device_init_device(&pcnet32_device);
  pcnet32_device.name = "0";
  pcnet32_device.ops = &pcnet32_ops;
  pcnet32_device.private=malloc(sizeof(pcnet32_private_t));
  private(&pcnet32_device)->pci = dev;
  private(&pcnet32_device)->ip=0x0f00a8c0;
  device_attach_driver(&pcnet32_device, &pcnet32_driver);
  
    
}


int pcnet32_set_device_option(device_t* this, const char* name, va_list args) {
  if(strcmp(name, "ip") == 0) {
    private(this)->ip = va_arg(args, ip_address_t);
    xprintf("pcnet32: ip set to  %x\n");
  } else {
    xprintf("pcnet32: unknown device option %s\n", name);
    return -1;
  }
  return 0;
}
